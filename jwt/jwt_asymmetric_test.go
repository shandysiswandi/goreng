package jwt

import (
	"testing"
	"time"

	"github.com/golang-jwt/jwt/v5"
	"github.com/stretchr/testify/assert"
)

func TestNewJWAsymmetric(t *testing.T) {
	pKey := "LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUV2UUlCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQktjd2dnU2pBZ0VBQW9JQkFRRFBYOHEwdUhUN0pHeEgKL3ZHUEdpVHlMakVWTDY5UHV3WGJTYUxTczNZNERkR2dLMmRGNHdmWTlPWDB1RlBQYmZhd1BvL1lhdWhMSktrNQpaV1ArMEhiUGdKY0ZWUThpQlRUZ1VpM2ZsTmJ3NnpmaTNscGN4b0l3MUNqNmNSMjJlcnFvUFhwMVU3eTRCaG1CCnc0aHZJaEF5TlpaaVZGS0RyU3IxVGpTMXdEQUlXenZBeitYQUVzeVNyTnVPSFhtOWpya3QzVE5nR09xSXA0b2YKT1hpY0M5NDcvbVB0WEdlWXRzektRUzNZeTFEczZVY0hnSGc1RWphdWtnQ2Ixek91OGVVSnB4ZG1OcEczNnZtOQpiTTliWHEzRWZWcFBUY2JNNlI2bTBNTEE5V2ZPSjlZMElCOFY4TWtHNFBBeVloN0RMSWlrcC9hanFMb3c3L3M1CmVGdUtXM0d4QWdNQkFBRUNnZ0VBRVU3dmZsSC9BWTh5c25lbTljaTYyTFBlU09Sbi80R2VwWVRwNENnMmI4dEgKZWRUbGs4RzFQL2lBMFFJcGpLQ2kvR2JjWHJYZG1aZi92OWlrbGZvVVVKRnRDWGJtQW5Mb3pPaFBCK0JHYUdsWgppc2dBUnNvU3g3eU5od20xN3lzak5UT2NhdnFJUDl2U2VUQTJ6UC9NMWtQK3YwcEdjTk1kU01nMFFnOCtjeFB6CnduOCtLaENZeTllR0JYd01LYmpFVnp3Wmc3blVxTjMvTmFsTC92bCtjejRKcVNyUVFabWlNa1kwR1o0UWpLUFIKUWJhaXZ2Tm4yZGRVeC9Cd3ZMZWVJb253RTZpUTZtT1IxUERsK2dQaDN6UDI4UnV1dFR6T2hHNUd1dllMUlFvUQpHem0vQnovdlVyN29FUk9DOE9ZV2xOZGdYcHRCSDE3VSsxdEVBUGN2SVFLQmdRRDN3dTl5dUdURU9haEdHeVNjCjA0Wm8xVGNYb29za291ak96V2pKNnVpR1c4TXpFTXYzMHB6WDEwYWg2WUMxWUZML3lIdkx5eitWTTdnb0NOVWsKUElYeWE5MTFnbTd4MzdXMko2SU1oeVZna1NnblVrM3pOTmpJVFVDR2VtdUVKNC9ESHNiaENzaUdINVpKMGYwWApzd05zWlpuaGFCME1WZGdBeUtFQW5pRFZiUUtCZ1FEV1JROS8rcm9wRm5QSjZZL2J6VURZb1VOUzRUOGhPRVZUCnVBRVhJM01HYUgzNjVBZTJQSU1zcFhVOW1VT1Vad2toMDltQWRLWUorWEE4QTEzQ0UvWVFSOXVyTE5vNVpsMncKZzJsM1YrMTlXcjhtTlZGMG81bDVsR2JQTEFOZmgwVFBLWHJWV2J6SHNTM2dVUkJSUlJkQnZLdU91bVNvOVpYRApIUTVzT215VzFRS0JnUURoTnZTY1RwdGlkNXJMNTE1M3BCdTQ3WisvdjBSR1VFUFp3SVJ4anpSQTllYlJZNEpWClNzREJ2dkY0dXA0QndZYVE5ZmY2UDA0VDNVaVlNN2N6MGtSY0ljclVSM1Y4TGtPcVNncVc0cjZLTWtqU3ZaRVgKODhEZkNzSU51L2hCMEFoeGNHZU9KMVF4LzBLSTVmWHZkZzAxbW9HdmtRbGVyaVhFU0p0NXlVUEZYUUtCZ0UrdwpnNkUvYUxrYlJwa1RxcE0rOVIwY2JPT0lMbWgyZXlJMXp3SUNCeWVjK1MyMFhVSGpvNDJaUTg5VER4VkVkTnNGCjVXQ25BWkc0R1l2WVhLaHZzQlpDQTJyWVZaai9mMXpFb3hibHRzZm1WaTBwcTAvTUFLcDlEUGVFRVFVWVUva1EKSGtUM0NRVGoyb0lRNUJhMXNYNmJZdHJFYStlQzN0NGdFbHNpSjN5NUFvR0FPdVVoSTRTT0NoSVQ1bnN5aFBYSgpaREZqOG03ZlZvRG81ekFwMVRFbXNsWkYwSDk1cE1UYW10WWFkUmIyM1ArVzA0eU5RTHZPbVdMSGcyNUxBcURwClh1TUJMV3NML1h4OURMTFJYTDRKdW9iUlNNOEZUQ0NORmhsYTBGcWZuUGhaUG5uOW9KYkRJWGd2Nkc0SysyaUEKRjBodXlqTnhVeGNpMW14bE5Bd2tkZFU9Ci0tLS0tRU5EIFBSSVZBVEUgS0VZLS0tLS0K"

	pubKey := "LS0tLS1CRUdJTiBQVUJMSUMgS0VZLS0tLS0KTUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUF6MS9LdExoMCt5UnNSLzd4anhvawo4aTR4RlMrdlQ3c0YyMG1pMHJOMk9BM1JvQ3RuUmVNSDJQVGw5TGhUejIzMnNENlAyR3JvU3lTcE9XVmovdEIyCno0Q1hCVlVQSWdVMDRGSXQzNVRXOE9zMzR0NWFYTWFDTU5RbytuRWR0bnE2cUQxNmRWTzh1QVlaZ2NPSWJ5SVEKTWpXV1lsUlNnNjBxOVU0MHRjQXdDRnM3d00vbHdCTE1rcXpiamgxNXZZNjVMZDB6WUJqcWlLZUtIemw0bkF2ZQpPLzVqN1Z4bm1MYk15a0V0Mk10UTdPbEhCNEI0T1JJMnJwSUFtOWN6cnZIbENhY1haamFSdCtyNXZXelBXMTZ0CnhIMWFUMDNHek9rZXB0REN3UFZuemlmV05DQWZGZkRKQnVEd01tSWV3eXlJcEtmMm82aTZNTy83T1hoYmlsdHgKc1FJREFRQUIKLS0tLS1FTkQgUFVCTElDIEtFWS0tLS0tCg=="

	type args struct {
		private string
		public  string
	}
	tests := []struct {
		name    string
		args    args
		want    *Asymmetric
		wantErr bool
	}{
		{
			name: "ErrorDecodePrivate",
			args: args{
				private: "!!invalid_base64!!",
				public:  "!!invalid_base64!!",
			},
			want:    nil,
			wantErr: true,
		},
		{
			name: "ErrorPemDecodePrivate",
			args: args{
				private: "none",
				public:  "!!invalid_base64!!",
			},
			want:    nil,
			wantErr: true,
		},
		{
			name: "ErrorParsePKCS8PrivateKey",
			args: args{
				private: "LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1IUUNBUUVFSUVhNTZHRzJQVFVKeUl0NEZ5ZGFNTkl0WXNqTmo2WkliZDdqWHZEWTRFbGZvQWNHQlN1QkJBQUsKb1VRRFFnQUVKUURuOC92ZDhvUXBBL1ZFM2NoMGxNNlZBcHJPVGlWOVZMcDM4cndmT29nM3FVWWNUeHhYL3N4SgpsMU00SG5jcUVvcFlJS2trb3ZvRkZpNjJZcGg2bnc9PQotLS0tLUVORCBQUklWQVRFIEtFWS0tLS0t",
				public:  "!!invalid_base64!!",
			},
			want:    nil,
			wantErr: true,
		},
		//
		{
			name: "ErrorDecodePublic",
			args: args{
				private: pKey,
				public:  "!!invalid_base64!!",
			},
			want:    nil,
			wantErr: true,
		},
		{
			name: "ErrorPemDecodePublic",
			args: args{
				private: pKey,
				public:  "none",
			},
			want:    nil,
			wantErr: true,
		},
		{
			name: "ErrorParsePKCS1PublicKey",
			args: args{
				private: pKey,
				public:  "LS0tLS1CRUdJTiBQVUJMSUMgS0VZLS0tLS0KTUhRQ0FRRUVJRWE1NkdHMlBUVUp5SXQ0RnlkYU1OSXRZc2pOajZaSWJkN2pYdkRZNEVsZm9BY0dCU3VCQkFBSwpvVVFEUWdBRUpRRG44L3ZkOG9RcEEvVkUzY2gwbE02VkFwck9UaVY5VkxwMzhyd2ZPb2czcVVZY1R4eFgvc3hKCmwxTTRIbmNxRW9wWUlLa2tvdm9GRmk2MllwaDZudz09Ci0tLS0tRU5EIFBVQkxJQyBLRVktLS0tLQ==",
			},
			want:    nil,
			wantErr: true,
		},
		//
		{
			name: "Success",
			args: args{
				private: pKey,
				public:  pubKey,
			},
			want:    &Asymmetric{},
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			t.Parallel()
			got, err := NewJWTAsymmetric(tt.args.private, tt.args.public)
			assert.Equal(t, tt.wantErr, err != nil)
			if tt.want != nil {
				assert.NotNil(t, got)
			}
		})
	}
}

func TestJWAsymmetric_Generate(t *testing.T) {
	pKey := "LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUV2UUlCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQktjd2dnU2pBZ0VBQW9JQkFRRFBYOHEwdUhUN0pHeEgKL3ZHUEdpVHlMakVWTDY5UHV3WGJTYUxTczNZNERkR2dLMmRGNHdmWTlPWDB1RlBQYmZhd1BvL1lhdWhMSktrNQpaV1ArMEhiUGdKY0ZWUThpQlRUZ1VpM2ZsTmJ3NnpmaTNscGN4b0l3MUNqNmNSMjJlcnFvUFhwMVU3eTRCaG1CCnc0aHZJaEF5TlpaaVZGS0RyU3IxVGpTMXdEQUlXenZBeitYQUVzeVNyTnVPSFhtOWpya3QzVE5nR09xSXA0b2YKT1hpY0M5NDcvbVB0WEdlWXRzektRUzNZeTFEczZVY0hnSGc1RWphdWtnQ2Ixek91OGVVSnB4ZG1OcEczNnZtOQpiTTliWHEzRWZWcFBUY2JNNlI2bTBNTEE5V2ZPSjlZMElCOFY4TWtHNFBBeVloN0RMSWlrcC9hanFMb3c3L3M1CmVGdUtXM0d4QWdNQkFBRUNnZ0VBRVU3dmZsSC9BWTh5c25lbTljaTYyTFBlU09Sbi80R2VwWVRwNENnMmI4dEgKZWRUbGs4RzFQL2lBMFFJcGpLQ2kvR2JjWHJYZG1aZi92OWlrbGZvVVVKRnRDWGJtQW5Mb3pPaFBCK0JHYUdsWgppc2dBUnNvU3g3eU5od20xN3lzak5UT2NhdnFJUDl2U2VUQTJ6UC9NMWtQK3YwcEdjTk1kU01nMFFnOCtjeFB6CnduOCtLaENZeTllR0JYd01LYmpFVnp3Wmc3blVxTjMvTmFsTC92bCtjejRKcVNyUVFabWlNa1kwR1o0UWpLUFIKUWJhaXZ2Tm4yZGRVeC9Cd3ZMZWVJb253RTZpUTZtT1IxUERsK2dQaDN6UDI4UnV1dFR6T2hHNUd1dllMUlFvUQpHem0vQnovdlVyN29FUk9DOE9ZV2xOZGdYcHRCSDE3VSsxdEVBUGN2SVFLQmdRRDN3dTl5dUdURU9haEdHeVNjCjA0Wm8xVGNYb29za291ak96V2pKNnVpR1c4TXpFTXYzMHB6WDEwYWg2WUMxWUZML3lIdkx5eitWTTdnb0NOVWsKUElYeWE5MTFnbTd4MzdXMko2SU1oeVZna1NnblVrM3pOTmpJVFVDR2VtdUVKNC9ESHNiaENzaUdINVpKMGYwWApzd05zWlpuaGFCME1WZGdBeUtFQW5pRFZiUUtCZ1FEV1JROS8rcm9wRm5QSjZZL2J6VURZb1VOUzRUOGhPRVZUCnVBRVhJM01HYUgzNjVBZTJQSU1zcFhVOW1VT1Vad2toMDltQWRLWUorWEE4QTEzQ0UvWVFSOXVyTE5vNVpsMncKZzJsM1YrMTlXcjhtTlZGMG81bDVsR2JQTEFOZmgwVFBLWHJWV2J6SHNTM2dVUkJSUlJkQnZLdU91bVNvOVpYRApIUTVzT215VzFRS0JnUURoTnZTY1RwdGlkNXJMNTE1M3BCdTQ3WisvdjBSR1VFUFp3SVJ4anpSQTllYlJZNEpWClNzREJ2dkY0dXA0QndZYVE5ZmY2UDA0VDNVaVlNN2N6MGtSY0ljclVSM1Y4TGtPcVNncVc0cjZLTWtqU3ZaRVgKODhEZkNzSU51L2hCMEFoeGNHZU9KMVF4LzBLSTVmWHZkZzAxbW9HdmtRbGVyaVhFU0p0NXlVUEZYUUtCZ0UrdwpnNkUvYUxrYlJwa1RxcE0rOVIwY2JPT0lMbWgyZXlJMXp3SUNCeWVjK1MyMFhVSGpvNDJaUTg5VER4VkVkTnNGCjVXQ25BWkc0R1l2WVhLaHZzQlpDQTJyWVZaai9mMXpFb3hibHRzZm1WaTBwcTAvTUFLcDlEUGVFRVFVWVUva1EKSGtUM0NRVGoyb0lRNUJhMXNYNmJZdHJFYStlQzN0NGdFbHNpSjN5NUFvR0FPdVVoSTRTT0NoSVQ1bnN5aFBYSgpaREZqOG03ZlZvRG81ekFwMVRFbXNsWkYwSDk1cE1UYW10WWFkUmIyM1ArVzA0eU5RTHZPbVdMSGcyNUxBcURwClh1TUJMV3NML1h4OURMTFJYTDRKdW9iUlNNOEZUQ0NORmhsYTBGcWZuUGhaUG5uOW9KYkRJWGd2Nkc0SysyaUEKRjBodXlqTnhVeGNpMW14bE5Bd2tkZFU9Ci0tLS0tRU5EIFBSSVZBVEUgS0VZLS0tLS0K"

	pubKey := "LS0tLS1CRUdJTiBQVUJMSUMgS0VZLS0tLS0KTUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUF6MS9LdExoMCt5UnNSLzd4anhvawo4aTR4RlMrdlQ3c0YyMG1pMHJOMk9BM1JvQ3RuUmVNSDJQVGw5TGhUejIzMnNENlAyR3JvU3lTcE9XVmovdEIyCno0Q1hCVlVQSWdVMDRGSXQzNVRXOE9zMzR0NWFYTWFDTU5RbytuRWR0bnE2cUQxNmRWTzh1QVlaZ2NPSWJ5SVEKTWpXV1lsUlNnNjBxOVU0MHRjQXdDRnM3d00vbHdCTE1rcXpiamgxNXZZNjVMZDB6WUJqcWlLZUtIemw0bkF2ZQpPLzVqN1Z4bm1MYk15a0V0Mk10UTdPbEhCNEI0T1JJMnJwSUFtOWN6cnZIbENhY1haamFSdCtyNXZXelBXMTZ0CnhIMWFUMDNHek9rZXB0REN3UFZuemlmV05DQWZGZkRKQnVEd01tSWV3eXlJcEtmMm82aTZNTy83T1hoYmlsdHgKc1FJREFRQUIKLS0tLS1FTkQgUFVCTElDIEtFWS0tLS0tCg=="

	type args struct {
		c jwt.MapClaims
	}
	tests := []struct {
		name    string
		args    args
		want    string
		wantErr bool
		mockFn  func(a args) *Asymmetric
	}{
		{
			name: "Success",
			args: args{c: jwt.MapClaims{
				"auth_id": "101",
				"email":   "email",
				"iss":     "test",
				"sub":     "test",
				"aud":     []string{"test"},
				"exp":     jwt.NewNumericDate(time.Date(2034, time.December, 1, 0, 0, 0, 0, time.Local)),
				"nbf":     jwt.NewNumericDate(time.Date(2024, time.December, 1, 0, 0, 0, 0, time.Local)),
				"iat":     jwt.NewNumericDate(time.Date(2024, time.December, 1, 0, 0, 0, 0, time.Local)),
			}},
			want:    "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdWQiOlsidGVzdCJdLCJhdXRoX2lkIjoiMTAxIiwiZW1haWwiOiJlbWFpbCIsImV4cCI6MjA0ODUxODgwMCwiaWF0IjoxNzMyOTg2MDAwLCJpc3MiOiJ0ZXN0IiwibmJmIjoxNzMyOTg2MDAwLCJzdWIiOiJ0ZXN0In0.eIjN8oXPU4_fyuDe4yz9cA60zSkzDl_188BHu5Fk-vN7A-agCAeTQtxZzET5gWFfrVJRhBhJbg8ymcDnTnywZkYgEvJCUls6WgyiBJKBzBHCINK6B3KnynUFsStnA6qgG8DoYS3Ym21crlHOkIUfN7LcCzYLEKyfzzz1t-MqICnOYz0IXU71bLNBlZtyQfynZhZaj5pEHQmVcp6gjkFcFPq5-uKJonSwFUlQ1e0mzt8gsXcQD9vj10fuAVtnmLCrmr0AxqSYaMj5dpp5jJKOwetya-0RCEtU2eFovn9yVBCUgUr46QIL8fO-fcLJ3difv11taqRPaPAVDz8X0O18rA",
			wantErr: false,
			mockFn: func(a args) *Asymmetric {
				j, _ := NewJWTAsymmetric(pKey, pubKey)

				return j
			},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			t.Parallel()
			got, err := tt.mockFn(tt.args).Generate(tt.args.c)
			assert.Equal(t, tt.wantErr, err != nil)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestJWAsymmetric_Verify(t *testing.T) {
	pKey := "LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUV2UUlCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQktjd2dnU2pBZ0VBQW9JQkFRRFBYOHEwdUhUN0pHeEgKL3ZHUEdpVHlMakVWTDY5UHV3WGJTYUxTczNZNERkR2dLMmRGNHdmWTlPWDB1RlBQYmZhd1BvL1lhdWhMSktrNQpaV1ArMEhiUGdKY0ZWUThpQlRUZ1VpM2ZsTmJ3NnpmaTNscGN4b0l3MUNqNmNSMjJlcnFvUFhwMVU3eTRCaG1CCnc0aHZJaEF5TlpaaVZGS0RyU3IxVGpTMXdEQUlXenZBeitYQUVzeVNyTnVPSFhtOWpya3QzVE5nR09xSXA0b2YKT1hpY0M5NDcvbVB0WEdlWXRzektRUzNZeTFEczZVY0hnSGc1RWphdWtnQ2Ixek91OGVVSnB4ZG1OcEczNnZtOQpiTTliWHEzRWZWcFBUY2JNNlI2bTBNTEE5V2ZPSjlZMElCOFY4TWtHNFBBeVloN0RMSWlrcC9hanFMb3c3L3M1CmVGdUtXM0d4QWdNQkFBRUNnZ0VBRVU3dmZsSC9BWTh5c25lbTljaTYyTFBlU09Sbi80R2VwWVRwNENnMmI4dEgKZWRUbGs4RzFQL2lBMFFJcGpLQ2kvR2JjWHJYZG1aZi92OWlrbGZvVVVKRnRDWGJtQW5Mb3pPaFBCK0JHYUdsWgppc2dBUnNvU3g3eU5od20xN3lzak5UT2NhdnFJUDl2U2VUQTJ6UC9NMWtQK3YwcEdjTk1kU01nMFFnOCtjeFB6CnduOCtLaENZeTllR0JYd01LYmpFVnp3Wmc3blVxTjMvTmFsTC92bCtjejRKcVNyUVFabWlNa1kwR1o0UWpLUFIKUWJhaXZ2Tm4yZGRVeC9Cd3ZMZWVJb253RTZpUTZtT1IxUERsK2dQaDN6UDI4UnV1dFR6T2hHNUd1dllMUlFvUQpHem0vQnovdlVyN29FUk9DOE9ZV2xOZGdYcHRCSDE3VSsxdEVBUGN2SVFLQmdRRDN3dTl5dUdURU9haEdHeVNjCjA0Wm8xVGNYb29za291ak96V2pKNnVpR1c4TXpFTXYzMHB6WDEwYWg2WUMxWUZML3lIdkx5eitWTTdnb0NOVWsKUElYeWE5MTFnbTd4MzdXMko2SU1oeVZna1NnblVrM3pOTmpJVFVDR2VtdUVKNC9ESHNiaENzaUdINVpKMGYwWApzd05zWlpuaGFCME1WZGdBeUtFQW5pRFZiUUtCZ1FEV1JROS8rcm9wRm5QSjZZL2J6VURZb1VOUzRUOGhPRVZUCnVBRVhJM01HYUgzNjVBZTJQSU1zcFhVOW1VT1Vad2toMDltQWRLWUorWEE4QTEzQ0UvWVFSOXVyTE5vNVpsMncKZzJsM1YrMTlXcjhtTlZGMG81bDVsR2JQTEFOZmgwVFBLWHJWV2J6SHNTM2dVUkJSUlJkQnZLdU91bVNvOVpYRApIUTVzT215VzFRS0JnUURoTnZTY1RwdGlkNXJMNTE1M3BCdTQ3WisvdjBSR1VFUFp3SVJ4anpSQTllYlJZNEpWClNzREJ2dkY0dXA0QndZYVE5ZmY2UDA0VDNVaVlNN2N6MGtSY0ljclVSM1Y4TGtPcVNncVc0cjZLTWtqU3ZaRVgKODhEZkNzSU51L2hCMEFoeGNHZU9KMVF4LzBLSTVmWHZkZzAxbW9HdmtRbGVyaVhFU0p0NXlVUEZYUUtCZ0UrdwpnNkUvYUxrYlJwa1RxcE0rOVIwY2JPT0lMbWgyZXlJMXp3SUNCeWVjK1MyMFhVSGpvNDJaUTg5VER4VkVkTnNGCjVXQ25BWkc0R1l2WVhLaHZzQlpDQTJyWVZaai9mMXpFb3hibHRzZm1WaTBwcTAvTUFLcDlEUGVFRVFVWVUva1EKSGtUM0NRVGoyb0lRNUJhMXNYNmJZdHJFYStlQzN0NGdFbHNpSjN5NUFvR0FPdVVoSTRTT0NoSVQ1bnN5aFBYSgpaREZqOG03ZlZvRG81ekFwMVRFbXNsWkYwSDk1cE1UYW10WWFkUmIyM1ArVzA0eU5RTHZPbVdMSGcyNUxBcURwClh1TUJMV3NML1h4OURMTFJYTDRKdW9iUlNNOEZUQ0NORmhsYTBGcWZuUGhaUG5uOW9KYkRJWGd2Nkc0SysyaUEKRjBodXlqTnhVeGNpMW14bE5Bd2tkZFU9Ci0tLS0tRU5EIFBSSVZBVEUgS0VZLS0tLS0K"

	pubKey := "LS0tLS1CRUdJTiBQVUJMSUMgS0VZLS0tLS0KTUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUF6MS9LdExoMCt5UnNSLzd4anhvawo4aTR4RlMrdlQ3c0YyMG1pMHJOMk9BM1JvQ3RuUmVNSDJQVGw5TGhUejIzMnNENlAyR3JvU3lTcE9XVmovdEIyCno0Q1hCVlVQSWdVMDRGSXQzNVRXOE9zMzR0NWFYTWFDTU5RbytuRWR0bnE2cUQxNmRWTzh1QVlaZ2NPSWJ5SVEKTWpXV1lsUlNnNjBxOVU0MHRjQXdDRnM3d00vbHdCTE1rcXpiamgxNXZZNjVMZDB6WUJqcWlLZUtIemw0bkF2ZQpPLzVqN1Z4bm1MYk15a0V0Mk10UTdPbEhCNEI0T1JJMnJwSUFtOWN6cnZIbENhY1haamFSdCtyNXZXelBXMTZ0CnhIMWFUMDNHek9rZXB0REN3UFZuemlmV05DQWZGZkRKQnVEd01tSWV3eXlJcEtmMm82aTZNTy83T1hoYmlsdHgKc1FJREFRQUIKLS0tLS1FTkQgUFVCTElDIEtFWS0tLS0tCg=="

	type args struct {
		token string
	}
	tests := []struct {
		name    string
		args    args
		want    jwt.Claims
		wantErr bool
		mockFn  func(a args) *Asymmetric
	}{
		{
			name:    "ErrorVerify",
			args:    args{token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"},
			want:    nil,
			wantErr: true,
			mockFn: func(a args) *Asymmetric {
				j, _ := NewJWTAsymmetric("LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUJWUUlCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQVQ4d2dnRTdBZ0VBQWtFQXg5d0R5UTdMUjd4Qk1MZ1BpREY4VkJGZkp3Rk9vRmYrZHhXbnZOZFJVcVBUb2NaWHlJTkExdVZUUjVhSStpSVMzM1FFdU9IL0E0QmFFNzdDU3pnL1BRSURBUUFCQWtBcFNsVjIzNmxVUWZxMjZjUDl0M21QOWNIU2tXVFE0RFVZbmI3NGx3UjhYYklNN29Vb3hWd3gyb052RDBPZ3RNRTkrcldYOU9tdmpZdWIvNENHNS9CSkFpRUE5czYwdEZpMUs3V2xFdXlRcW14OGxudmpYY0tuM0R1TktuM2pLS1Nldm1VQ0lRRFBUYW1WekpCV01mNkNrVWg1NTlkV0FMQzJmYlBUUWZST3k3ZkZPWEJqK1FJZ0RnN21JaU92WmliNW1TTmFkaXFweWhTU2RlUEJsZnphWktJNUR6YVpTRFVDSVFDd0g4dDArZGVuWTlKWUhCYjNlNEg0RDU0VGJiamFRNjdOUTBkZXlPNDBBUUloQUlGcVV6Mm5iSUNiZDNIWlhkRWlURzJDV3Q4eVVUZ2l4RWx1NHZtc2VoQjcKLS0tLS1FTkQgUFJJVkFURSBLRVktLS0tLQ==", "LS0tLS1CRUdJTiBQVUJMSUMgS0VZLS0tLS0KTUZzd0RRWUpLb1pJaHZjTkFRRUJCUUFEU2dBd1J3SkFiR1pycUhvaVRKV21kYzR2N1Fld09ETUR0UW9iK0NLcwpTY2RjTEZaZUdBWE9CMkpmOGFDeEk5MXc3WVBxQ2pHTVRNTDlRSmo1WDIvNkRMc203aUlBbndJREFRQUIKLS0tLS1FTkQgUFVCTElDIEtFWS0tLS0t")

				return j
			},
		},
		{
			name:    "ErrorExpired",
			args:    args{token: "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdWQiOlsidGVzdCJdLCJhdXRoX2lkIjoiMTAxIiwiZW1haWwiOiJlbWFpbCIsImV4cCI6MTczMjk4NjAwMCwiaWF0IjoxNzMyOTg2MDAwLCJpc3MiOiJ0ZXN0IiwibmJmIjoxNzMyOTg2MDAwLCJzdWIiOiJ0ZXN0In0.ZldFEoW_BSPjukf3cx2-QOBaBKbHq451ihD6vEx3AHatSJkWxmkkzAbaKgT-ko-qkmhiQ-pAqNxXtsowr6dKSm6SJMyILReW7eHniyufoWpr4vrJyctXaCCbq228mJN272muWOy-p7XUP8K6FT7yVe47F-wx6s7JWNw4SK2QZYwKctWmOy9-ZbQTFfehd4RNGRc1Xid-s88X7jcM2yB0VNxtmed-j22wqYuihfPwAE-KWn3PvPyilAr0cdIV6mUWQmvWkap57e8yZexTZ6WEaffYs7frNQNCL8qVbF8t4YKLl7e53sLpx1OQNvgUtrT5D0mY52acznSh9BuJJ_H23Q"},
			want:    nil,
			wantErr: true,
			mockFn: func(a args) *Asymmetric {
				j, _ := NewJWTAsymmetric(pKey, pubKey)

				return j
			},
		},
		{
			name: "Success",
			args: args{token: "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdWQiOlsidGVzdCJdLCJhdXRoX2lkIjoiMTAxIiwiZW1haWwiOiJlbWFpbCIsImV4cCI6MjA0ODUxODgwMCwiaWF0IjoxNzMyOTg2MDAwLCJpc3MiOiJ0ZXN0IiwibmJmIjoxNzMyOTg2MDAwLCJzdWIiOiJ0ZXN0In0.eIjN8oXPU4_fyuDe4yz9cA60zSkzDl_188BHu5Fk-vN7A-agCAeTQtxZzET5gWFfrVJRhBhJbg8ymcDnTnywZkYgEvJCUls6WgyiBJKBzBHCINK6B3KnynUFsStnA6qgG8DoYS3Ym21crlHOkIUfN7LcCzYLEKyfzzz1t-MqICnOYz0IXU71bLNBlZtyQfynZhZaj5pEHQmVcp6gjkFcFPq5-uKJonSwFUlQ1e0mzt8gsXcQD9vj10fuAVtnmLCrmr0AxqSYaMj5dpp5jJKOwetya-0RCEtU2eFovn9yVBCUgUr46QIL8fO-fcLJ3difv11taqRPaPAVDz8X0O18rA"},
			want: jwt.MapClaims{
				"aud":     []any{"test"},
				"auth_id": "101",
				"email":   "email",
				"exp":     2.0485188e+09,
				"iat":     1.732986e+09,
				"iss":     "test",
				"nbf":     1.732986e+09,
				"sub":     "test",
			},
			wantErr: false,
			mockFn: func(a args) *Asymmetric {
				j, _ := NewJWTAsymmetric(pKey, pubKey)

				return j
			},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			t.Parallel()
			tkn := tt.mockFn(tt.args)
			got, err := tkn.Verify(tt.args.token)
			assert.Equal(t, tt.wantErr, err != nil)
			assert.Equal(t, tt.want, got)
		})
	}
}
